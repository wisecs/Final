
Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000262  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000069  00800200  00800200  000002d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000118f  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000daa  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063a  00000000  00000000  000022f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00002934  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b6  00000000  00000000  00002aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000064f  00000000  00000000  00003162  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000037b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	a8 c0       	rjmp	.+336    	; 0x1b6 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e6       	ldi	r30, 0x62	; 98
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a9 36       	cpi	r26, 0x69	; 105
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	36 d0       	rcall	.+108    	; 0x18c <main>
 120:	9e c0       	rjmp	.+316    	; 0x25e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <serial_setup>:
char serial_read(void) {
	while(!(UCSR0A & (1 << RXC0))) {
		//wait until Receive Complete
	}
	return UDR0;
}
 124:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 128:	e1 ec       	ldi	r30, 0xC1	; 193
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	10 82       	st	Z, r1
 12e:	a2 ec       	ldi	r26, 0xC2	; 194
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	1c 92       	st	X, r1
 134:	80 81       	ld	r24, Z
 136:	80 61       	ori	r24, 0x10	; 16
 138:	80 83       	st	Z, r24
 13a:	80 81       	ld	r24, Z
 13c:	88 60       	ori	r24, 0x08	; 8
 13e:	80 83       	st	Z, r24
 140:	80 81       	ld	r24, Z
 142:	80 68       	ori	r24, 0x80	; 128
 144:	80 83       	st	Z, r24
 146:	8c 91       	ld	r24, X
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	8c 93       	st	X, r24
 14c:	8c 91       	ld	r24, X
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	8c 93       	st	X, r24
 152:	87 e6       	ldi	r24, 0x67	; 103
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 15a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 15e:	08 95       	ret

00000160 <serial_write>:
 160:	e0 ec       	ldi	r30, 0xC0	; 192
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	90 81       	ld	r25, Z
 166:	95 ff       	sbrs	r25, 5
 168:	fd cf       	rjmp	.-6      	; 0x164 <serial_write+0x4>
 16a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 16e:	08 95       	ret

00000170 <serial_write_word>:
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
 176:	88 81       	ld	r24, Y
 178:	88 23       	and	r24, r24
 17a:	29 f0       	breq	.+10     	; 0x186 <serial_write_word+0x16>
 17c:	21 96       	adiw	r28, 0x01	; 1
 17e:	f0 df       	rcall	.-32     	; 0x160 <serial_write>
 180:	89 91       	ld	r24, Y+
 182:	81 11       	cpse	r24, r1
 184:	fc cf       	rjmp	.-8      	; 0x17e <serial_write_word+0xe>
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <main>:
 18c:	2f ef       	ldi	r18, 0xFF	; 255
 18e:	83 ed       	ldi	r24, 0xD3	; 211
 190:	90 e3       	ldi	r25, 0x30	; 48
 192:	21 50       	subi	r18, 0x01	; 1
 194:	80 40       	sbci	r24, 0x00	; 0
 196:	90 40       	sbci	r25, 0x00	; 0
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x6>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x10>
 19c:	00 00       	nop
 19e:	c2 df       	rcall	.-124    	; 0x124 <serial_setup>
 1a0:	78 94       	sei
 1a2:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <RX_FLAG>
 1a6:	88 23       	and	r24, r24
 1a8:	e1 f3       	breq	.-8      	; 0x1a2 <main+0x16>
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	92 e0       	ldi	r25, 0x02	; 2
 1ae:	e0 df       	rcall	.-64     	; 0x170 <serial_write_word>
 1b0:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <RX_FLAG>
 1b4:	f6 cf       	rjmp	.-20     	; 0x1a2 <main+0x16>

000001b6 <__vector_25>:

ISR(USART0_RX_vect) {
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	0b b6       	in	r0, 0x3b	; 59
 1c2:	0f 92       	push	r0
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	ef 93       	push	r30
 1ca:	ff 93       	push	r31
	rx_word[rx_i] = UDR0;
 1cc:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <rx_i>
 1d0:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <rx_i+0x1>
 1d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 1d8:	eb 5f       	subi	r30, 0xFB	; 251
 1da:	fd 4f       	sbci	r31, 0xFD	; 253
 1dc:	80 83       	st	Z, r24
	//UDR0 = rx_word[rx_i];	//Echo back

	if(rx_word[rx_i] == 0x0A || rx_word[rx_i] == 0x0D || rx_word[rx_i] == '\0') {
 1de:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <rx_i>
 1e2:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <rx_i+0x1>
 1e6:	eb 5f       	subi	r30, 0xFB	; 251
 1e8:	fd 4f       	sbci	r31, 0xFD	; 253
 1ea:	80 81       	ld	r24, Z
 1ec:	8a 30       	cpi	r24, 0x0A	; 10
 1ee:	91 f0       	breq	.+36     	; 0x214 <__vector_25+0x5e>
 1f0:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <rx_i>
 1f4:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <rx_i+0x1>
 1f8:	eb 5f       	subi	r30, 0xFB	; 251
 1fa:	fd 4f       	sbci	r31, 0xFD	; 253
 1fc:	80 81       	ld	r24, Z
 1fe:	8d 30       	cpi	r24, 0x0D	; 13
 200:	49 f0       	breq	.+18     	; 0x214 <__vector_25+0x5e>
 202:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <rx_i>
 206:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <rx_i+0x1>
 20a:	eb 5f       	subi	r30, 0xFB	; 251
 20c:	fd 4f       	sbci	r31, 0xFD	; 253
 20e:	80 81       	ld	r24, Z
 210:	81 11       	cpse	r24, r1
 212:	11 c0       	rjmp	.+34     	; 0x236 <__vector_25+0x80>
		RX_FLAG = true;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <RX_FLAG>
		rx_len = rx_i-1;
 21a:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <rx_i>
 21e:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <rx_i+0x1>
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_end+0x1>
 228:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_end>
		rx_i = 0;
 22c:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <rx_i+0x1>
 230:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <rx_i>
 234:	09 c0       	rjmp	.+18     	; 0x248 <__vector_25+0x92>
	} else 
		rx_i++;
 236:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <rx_i>
 23a:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <rx_i+0x1>
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <rx_i+0x1>
 244:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <rx_i>
}
 248:	ff 91       	pop	r31
 24a:	ef 91       	pop	r30
 24c:	9f 91       	pop	r25
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0b be       	out	0x3b, r0	; 59
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <_exit>:
 25e:	f8 94       	cli

00000260 <__stop_program>:
 260:	ff cf       	rjmp	.-2      	; 0x260 <__stop_program>
